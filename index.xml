<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amplify Web App Workshop on Amplify / AppSync / React Workshop</title>
    <link>https://awskrug.github.io/amplify-photo-gallery-workshop/</link>
    <description>Recent content in Amplify Web App Workshop on Amplify / AppSync / React Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    
	<atom:link href="https://awskrug.github.io/amplify-photo-gallery-workshop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS account 생성하기</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/10_%EC%82%AC%EC%A0%84%EC%A4%80%EB%B9%84/1_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/10_%EC%82%AC%EC%A0%84%EC%A4%80%EB%B9%84/1_account.html</guid>
      <description>Workshop에서 사용하고자 하는 AWS 계정은 새로운 IAM 역할을 만들수 있어야 하고 다른 IAM 권한 범위를 지정할 수 있어야 합니다.  이미 AWS 계정을 가지고 있고, IAM 관리자 접속 권한이 있다면 이 페이지를 넘어가도 좋습니다.   관리자 접속 권한 계정이 없다면: 새로 하나 만듭시다.
 AWS 계정을 가지게 되었다면, 남은 워크샵 단계를 잘 따르고 있는 확인해보세요.
AWS 계정에 대한 관리자 권한이 있는 IAM user : 워크샵에서 사용할 IAM user를 만듭니다.</description>
    </item>
    
    <item>
      <title>Managing Albums</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/50_working_with_albums/5_managing_albums.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/50_working_with_albums/5_managing_albums.html</guid>
      <description>At this point, we have a web app that authenticates users and a secure GraphQL API endpoint that lets us create and read Album data. It&amp;rsquo;s time to connect the two together!
As we saw above, [AWS Amplify](https://aws.github.io/aws-amplify/) is an open source JavaScript library that makes it very easy to integrate a number of cloud services into your web or React Native apps. We&#39;ll start by using its [Connect React component](https://aws-amplify.</description>
    </item>
    
    <item>
      <title>AppSync 세팅</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/40_graphql/10_setting_up_appsync.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/40_graphql/10_setting_up_appsync.html</guid>
      <description>이제 인증된 사용자를 가지고 앨범을 만들기 위한 API를 만들어 봅시다. 이 앨범에는 아직 사진이 없고 단순히 이름과 앨범을 생성한 사용자 이름만 있을 것입니다.
[AWS AppSync](https://aws.amazon.com/appsync/)를 사용하여 API를 구현하고, 데이터 기반 어플리케이션을 구현하기 위하여 관리형 GraphQL 서비스를 사용합니다. 아직 GraphQL이 익숙하지 않다면 워크샵 단계를 진행하기 전에 시간을 내어 다음 자료를 살펴 보세요. [https://graphql.github.io/learn/](https://graphql.github.io/learn/) 단계를 계속하는 동안에도 질문이 생긴다면 위 자료를 참조하시기 바랍니다.  AWS AppSync API 추가하기 photo-albums 디렉토리에서 다음 명령어를 수행하세요 amplify add api</description>
    </item>
    
    <item>
      <title>Cloud9 Workspace 생성하기</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/10_%EC%82%AC%EC%A0%84%EC%A4%80%EB%B9%84/10_workspace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/10_%EC%82%AC%EC%A0%84%EC%A4%80%EB%B9%84/10_workspace.html</guid>
      <description>AWS Cloud9은 cloud-based의 통합 개발 환경(IDE)입니다. 브라우저에서 바로 코드를 작성하고 실행시키고, 디버깅할수 있습니다. Cloud9은 코드 편집기, 디버거와 터미널을 제공합니다. 또한 Javascript, Python, PHP 등의 인기 있는 프로그래밍언어를 위한 필수적인 도구들이 미리 패키징 되어 제공됩니다. 무엇보다도 새로운 프로젝트 시작을 위해 설치 파일이 필요하거나, 개발 환경 설정이 필요하지 않습니다.
The Cloud9의 작업영역은 AWS root 계정이 아닌, Administrator 권한을 가진 IAM user에 의해서 작성 되어야 합니다. root 계정이 아닌 IAM User로 로그인 하여 작업 중인게 맞는지 꼭 확인하세요.</description>
    </item>
    
    <item>
      <title>Creating a Photo Processor Lambda function</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/70_generating_thumbnails/10_creating_a_photo_processor_lambda.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/70_generating_thumbnails/10_creating_a_photo_processor_lambda.html</guid>
      <description>Let&amp;rsquo;s make a photo processor lambda function so that we can resize our photos.
When following the instructions below, **you must name your lambda function _workshopphotoprocessor_**.   Later, we&#39;ll edit some CloudFormation templates, and the function name **workshopphotoprocessor** is hard coded to make it easier for this workshop (less edits that you&#39;ll have to do).   From the photo-albums directory, run: amplify function add and respond to the prompts the same way as shown below.</description>
    </item>
    
    <item>
      <title>Integrating Amazon Rekognition</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/10_rekognition.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/10_rekognition.html</guid>
      <description>It would be great if we could find images without having to manually tag them with descriptions of their contents. Luckily, adding this feature is pretty easy thanks to Amazon Rekognition. We can use the DetectLabels API &amp;ndash; if we give it a photo, it will respond with a list of appropriate labels for the image. Perfect!
**Amazon Rekognition&#39;s DetectLabels Quick Summary**  You pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket.</description>
    </item>
    
    <item>
      <title>Making a Lightbox for Viewing Fullsize Photos</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/140_bonus/10_lightbox_photos.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/140_bonus/10_lightbox_photos.html</guid>
      <description>One thing we haven&amp;rsquo;t yet addressed in our app is adding the ability for users to click on a photo thumbnail to see a larger version of the photo. Since we already have the fullsize and the thumbnail data available to query from our API, all we need to do is update our front end application with a few more lines of code.
Updating the front end Replace photo-albums/src/App.js with the following updated version: // photo-albums/src/App.</description>
    </item>
    
    <item>
      <title>무엇을 빌드하나</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/20_getting_started/10_what_we_will_build.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/20_getting_started/10_what_we_will_build.html</guid>
      <description>목표 이 워크샵에서 다음을 포함한 몇 가지 기능이 있는 앱을 빌드합니다.
 사용자 등록과 인증을 지원해서 사진 앨법을 누가 소유했는지 알 수 있습니다.
 API 서버를 빌드하여 프론트엔드는 사용자에게 맞는 앨범과 사진을 적재할 수 있습니다.
 누가 무엇을 볼 수 있는가에 권한 정보, 앨범, 사진을 저장하여 API는 조회와 저장을 위한 빠르고 신뢰성있는 저장소를 갖습니다.
 사진을 저장하고 제공하며 사용자가 앨범에 업로드하는 모든 사진을 저장할 수 있습니다.
 자동으로 사진 썸네일을 작성하여 사용자가 포토 앨범 목록을 살펴볼 때에 전체 해상도의 사진을 제공하지 않습니다.</description>
    </item>
    
    <item>
      <title>백엔드 구성하기</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/30_adding_auth/10_adding_auth_back.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/30_adding_auth/10_adding_auth_back.html</guid>
      <description>이제 우리에게 간단한 리액트 앱이 있으니, 앱으로 사용자 등록하고 로그인하도록 만들겠습니다. 지금 아무 것도 할 수 없지만 백엔드 API에 조회하는 기능을 추가하면 어떤 사용자가 우리 시스템을 사용하는지 알 수 있습니다.
AWS Amplify CLI는 리엑트와 리엑트 네이티브용 iOS와 안드로이드에 SDK를 제공하여 웹과 모바일 앱에 클라우드 기능을 손쉽게 추가할 수 있습니다. 시작을 위해 새 애플리케이션을 만들고 사용자 인증을 가능토록 합니다. 앱에 AWS Amplify CLI로 구성하여 앱과 오픈소스 [AWS Amplify](https://aws-amplify.github.io/) 라이브러리를 연결합니다. 이제 해야 할 것은 리액트 앱에서 이것을 사용하면 됩니다.</description>
    </item>
    
    <item>
      <title>축하드립니다!</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/130_wrapping_up/10_what_we_built.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/130_wrapping_up/10_what_we_built.html</guid>
      <description>실제로 상용할 어플리케이션을 만들진 않았지만, 간단하게 공유가능한 앨범 웹 앱을 만들어보았습니다.
우리가 완료한 내용들을 다음 리스트에서 확인해보겠습니다. 우리는 :
 간단한 리엑트(React) 웹 앱으로 시작했습니다.
 사용자인증 추가로 완벽한 회원가입 및 로그인을 구현하였습니다.
 DynamoDB 테이블에 적재될 사진 앨범들이 안전하게 관리되도록 AWS AppSync의 GraphQL API를 이용했습니다.
 앨범추가 및 보기기능을 추가하였습니다.
 앨범에 사진들을 업로드하고 썸네일 자동생성을 완료하였습니다.
 사진이 많은 앨범의 &amp;ldquo;더보기&amp;rdquo;와 같이 페이지매김을 도입하였습니다.
 Amazon Rekognition API를 이용한 사진의 자동라벨 감지기능 추가하였습니다.</description>
    </item>
    
    <item>
      <title>Allowing Other Users To Collaborate In Albums</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/140_bonus/20_album_membership.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/140_bonus/20_album_membership.html</guid>
      <description>We can take advantage of the fact that multiple users can sign in to our app and add the ability for other people view and upload to our albums on a case-by-case basis.
The simplest way to do this is to have each album contain a set of usernames that are allowed to view and upload photos to it. Let&amp;rsquo;s see how we can make this work.
Updating the backend Amplify supports multiple authorization declarations on the @model types in our GraphQL Schema.</description>
    </item>
    
    <item>
      <title>Connecting the photos bucket to the processor function</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/70_generating_thumbnails/20_connecting_the_lambda_to_the_bucket.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/70_generating_thumbnails/20_connecting_the_lambda_to_the_bucket.html</guid>
      <description>Triggering the function when new photos are uploaded to the S3 bucket Now that we&amp;rsquo;ve created our Photo Processor function, we need to set up a trigger for it to run. Since we want to process every photo that gets uploaded to an album, we&amp;rsquo;ll make these changes by updating the configuration of the S3 userfiles bucket that Amplify created for us.
 Replace photo-albums/amplify/backend/storage/photoalbumsstorage/s3-cloudformation-template.json with the following: { &amp;#34;AWSTemplateFormatVersion&amp;#34;: &amp;#34;2010-09-09&amp;#34;, &amp;#34;Description&amp;#34;: &amp;#34;S3 resource stack creation using Amplify CLI&amp;#34;, &amp;#34;Parameters&amp;#34;: { &amp;#34;bucketName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;authPolicyName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;unauthPolicyName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;authRoleName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;unauthRoleName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;unauthPermissions&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;authPermissions&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;env&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }  }, &amp;#34;Conditions&amp;#34;: { &amp;#34;ShouldNotCreateEnvResources&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;env&amp;#34; }, &amp;#34;NONE&amp;#34; ] }, &amp;#34;EnableUnauthReadWrite&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;unauthPermissions&amp;#34; }, &amp;#34;rw&amp;#34; ] }, &amp;#34;EnableUnauthRead&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;unauthPermissions&amp;#34; }, &amp;#34;r&amp;#34; ] }, &amp;#34;EnableUnauthWrite&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;unauthPermissions&amp;#34; }, &amp;#34;w&amp;#34; ] }, &amp;#34;EnableAuthReadWrite&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;authPermissions&amp;#34; }, &amp;#34;rw&amp;#34; ] }, &amp;#34;EnableAuthRead&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;authPermissions&amp;#34; }, &amp;#34;r&amp;#34; ] }, &amp;#34;EnableAuthWrite&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;authPermissions&amp;#34; }, &amp;#34;w&amp;#34; ] } }, &amp;#34;Resources&amp;#34;: { &amp;#34;InvokePhotoProcessorLambda&amp;#34;: { &amp;#34;Type&amp;#34; : &amp;#34;AWS::Lambda::Permission&amp;#34;, &amp;#34;Properties&amp;#34; : { &amp;#34;Action&amp;#34; : &amp;#34;lambda:InvokeFunction&amp;#34;, &amp;#34;FunctionName&amp;#34; : &amp;#34;workshopphotoprocessor&amp;#34;, &amp;#34;Principal&amp;#34; : &amp;#34;s3.</description>
    </item>
    
    <item>
      <title>Making Photos Searchable</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/20_prep_for_searching.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/20_prep_for_searching.html</guid>
      <description>Updating the GraphQL Schema Now that we are storing labels for each photo, we&amp;rsquo;re ready to move on and expose this data via our AppSync API.
While it&amp;rsquo;s possible to perform some level of searching via DynamoDB Query operations, a more flexible and performant approach is to use the Amazon Elasticsearch Service to index data and handle our search queries. Fortunately, the Amplify CLI makes creating an Amazon Elasticsearch Service endpoint, and connecting it to our app&amp;rsquo;s data, very easy.</description>
    </item>
    
    <item>
      <title>Querie 수행하기</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/40_graphql/20_trying_out_queries.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/40_graphql/20_trying_out_queries.html</guid>
      <description>AWS Console로 접근하여 photoalbums API를 클릭합니다. 이제 API를 파고들어봅시다.
 Link to AWS AppSync web console in Northern Virgina
 Link to AWS AppSync web console in Ireland
 
왼쪽 사이드바에 있는 Queries를 클릭합니다.
AWS AppSync의 대화형 쿼리 실행 영역인 이곳에서 쿼리를 작성하거나 변경하고, 쿼리를 실행하여 결과를 볼 수 있습니다. 이는 Resolver들이 우리가 예상한 대로 잘 작동하는지 테스트하기 위한 좋은 방법입니다.  AppSync 인증 쿼리를 실행하기 전에 사용자 인증이 필요합니다.</description>
    </item>
    
    <item>
      <title>리소스 삭제하기</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/130_wrapping_up/20_cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/130_wrapping_up/20_cleanup.html</guid>
      <description>Amplify로 삭제하기 Amplify는 우리가 이번 워크샵에서 프로비저닝했던 모든 리소스들을 삭제할 수 있는 작업을 할 수 있습니다 (프로비저닝된 CloudFormation 중첩스택을 삭제하는 작업을 시도합니다). 그러나 몇가지 리소스들은 삭제거부가 되므로, 수동으로 삭제해줍니다.
 photo-albums 디렉토리에서 amplify delete를 실행하고 삭제를 확인하기 위해 *Enter*키를 누릅니다.
 Amplify가 리소스들을 삭제하는 동안 기다립니다.
  수동으로 일부 삭제하기 이제 CloudFormation stacks console로 이동해서 &amp;lsquo;DELETE FAILED&amp;rsquo;상태표시를 나타내는 몇개의 스택들을 클릭합니다. 귀하께서는 삭제실패된 원인과 무엇이 실패되었는지를 보실 수 있습니다.</description>
    </item>
    
    <item>
      <title>설치 &amp; 설정</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/10_%EC%82%AC%EC%A0%84%EC%A4%80%EB%B9%84/20_software.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/10_%EC%82%AC%EC%A0%84%EC%A4%80%EB%B9%84/20_software.html</guid>
      <description>코딩을 시작하기 전에, Cloud9 환경에 몇 가지 설치, 업데이트, 설정을 해야합니다.
설치와 업데이트 Cloud9 터미널에서 다음 명령어를 수행하세요. 우리가 사용할 몇 가지 소프트웨어를 설치하고 업데이트 합니다.
# Update the AWS CLI pip install --user --upgrade awscli # Install and use Node.js v8.10 (to match AWS Lambda) nvm install v8.10.0 nvm alias default v8.10.0 # Install the AWS Amplify CLI npm install -g @aws-amplify/cli 이 명령어들은 완료 되는데 시간이 좀 걸릴수 있습니다.</description>
    </item>
    
    <item>
      <title>앱 부트스트래핑</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/20_getting_started/20_bootstrapping_the_app.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/20_getting_started/20_bootstrapping_the_app.html</guid>
      <description>리액트(React) 앱 만들기 create-react-app CLI로 새로운 리액트 웹 앱을 제작하며 시작하겠습니다.
이는 로컬에서 자동으로 다시 서버를 띄워주는 리액트 샘플 앱과 브라우저에서 async/await 문법, 화살표 함수 등을 지원하도록 트랜스 컴파일 기능을 제공합니다.  create-react-app은 [https://github.com/facebook/create-react-app](https://github.com/facebook/create-react-app)에서 좀 더 배울 수 있습니다.  Cloud9 터미널에서 npx create-react-app photo-albums를 실행하시고 새로 생성된 디렉토리로 이동합니다 cd photo-albums
시멘틱 UI 리액트 추가하기 UI를 작성하기 전에 인터페이스를 좀 더 근사하게 만들수 있는 리액트의 시멘틱 UI 컴포넌트를 추가합니다.</description>
    </item>
    
    <item>
      <title>프론트엔드 렌더링</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/30_adding_auth/20_adding_auth_front.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/30_adding_auth/20_adding_auth_front.html</guid>
      <description>이제 등록과 로그인을 관리하는 백엔드가 구성되었으니 withAuthenticator AWS Amplify의 상위 리액트 컴포넌트를 이용해서 기존 App 컴포넌트를 감싸도록 합니다. 그러면 앱에서 사용자 등록, 확인, 로그인, 로그 아웃, 비밀번호 재설정을 할 수 있는 간단한 UI를 제공합니다.
Amplify NPM 종속성 추가 아직 aws-amplify, aws-amplify-react 모듈을 앱에 추가하지 않았으니 이제 추가합니다.
 npm install --save aws-amplify aws-amplify-react을 실행합니다.
 src/App.js 내용을 다음으로 교체합니다. // src/App.js  import React, { Component } from &amp;#39;react&amp;#39;; import { Header } from &amp;#39;semantic-ui-react&amp;#39;; import Amplify from &amp;#39;aws-amplify&amp;#39;; import aws_exports from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Adding Cloud Storage</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/60_managing_photos/30_adding_storage.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/60_managing_photos/30_adding_storage.html</guid>
      <description>We&amp;rsquo;ll need a place to store all of the photos that get uploaded to our albums. Amazon Simple Storage Service (S3) is a great option for this and Amplify&amp;rsquo;s Storage module makes setting up and working with S3 very easy.
You can read more about Amplify&#39;s Storage module [here](https://aws-amplify.github.io/amplify-js/media/storage_guide).  Configuring and adding storage First, we&amp;rsquo;ll use the Amplify CLI to enable storage for our app. This will create a bucket on Amazon S3 and set it up with appropriate permissions so that users who are logged in to our app can read from and write to it.</description>
    </item>
    
    <item>
      <title>Managing Photos</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/60_managing_photos/40_upload_photos_consolidated.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/60_managing_photos/40_upload_photos_consolidated.html</guid>
      <description>Now that we have an S3 bucket where our photos can get stored, we&amp;rsquo;ll want to create a UI that lets us upload photos to that bucket for storage. We&amp;rsquo;ll also need to track that the photo was intended to be part of a specific album that it was uploaded to, so that we can eventually load all of the photos that belong to that album.
Let&amp;rsquo;s create a new S3ImageUpload component that will contain an HTML file input element which will fire off an event handler when a user selects a photo.</description>
    </item>
    
    <item>
      <title>Searching Photos By Label</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/40_searching_for_labels.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/40_searching_for_labels.html</guid>
      <description>With all of the back-end work completed, now we just need to update our web app to allow searching for photos by label.
Let&amp;rsquo;s create a new Search component and add it to the App component to be rendered on the root path. For rendering all of the matching photos in the Search component, we&amp;rsquo;ll re-use the PhotosList component we already created.
Replace photo-albums/src/App.js with the following: // photo-albums/src/App.js  import React, { Component } from &amp;#39;react&amp;#39;; import {BrowserRouter as Router, Route, NavLink} from &amp;#39;react-router-dom&amp;#39;; import { Divider, Form, Grid, Header, Input, List, Segment } from &amp;#39;semantic-ui-react&amp;#39;; import {v4 as uuid} from &amp;#39;uuid&amp;#39;; import { Connect, S3Image, withAuthenticator } from &amp;#39;aws-amplify-react&amp;#39;; import Amplify, { API, graphqlOperation, Storage } from &amp;#39;aws-amplify&amp;#39;; import aws_exports from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Deploying our app to S3</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/120_deploying/10_deploying.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/120_deploying/10_deploying.html</guid>
      <description>Before we build and publish our app, we should free up some memory on the Cloud9 instance. If you&amp;rsquo;re using a micro Cloud9 instance size, there&amp;rsquo;s a good chance there won&amp;rsquo;t be enough memory available to keep our development web server running and to create a production build.
 Go to the terminal tab that&amp;rsquo;s running the development webserver (where you ran npm start)
 Press Control-C to interrupt the development webserver and kill it.</description>
    </item>
    
  </channel>
</rss>